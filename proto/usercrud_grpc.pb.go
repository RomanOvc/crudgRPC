// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package usercrud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCrudMnagmentClient is the client API for UserCrudMnagment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCrudMnagmentClient interface {
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CustomerList, error)
	GetByIdCustomer(ctx context.Context, in *CustomerRequestId, opts ...grpc.CallOption) (*Customer, error)
	InsertCustomer(ctx context.Context, in *ICustomer, opts ...grpc.CallOption) (*StateMessage, error)
	UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	RemoveCustomer(ctx context.Context, in *CustomerRequestId, opts ...grpc.CallOption) (*StateMessage, error)
}

type userCrudMnagmentClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCrudMnagmentClient(cc grpc.ClientConnInterface) UserCrudMnagmentClient {
	return &userCrudMnagmentClient{cc}
}

func (c *userCrudMnagmentClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CustomerList, error) {
	out := new(CustomerList)
	err := c.cc.Invoke(ctx, "/usercrud.UserCrudMnagment/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudMnagmentClient) GetByIdCustomer(ctx context.Context, in *CustomerRequestId, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/usercrud.UserCrudMnagment/GetByIdCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudMnagmentClient) InsertCustomer(ctx context.Context, in *ICustomer, opts ...grpc.CallOption) (*StateMessage, error) {
	out := new(StateMessage)
	err := c.cc.Invoke(ctx, "/usercrud.UserCrudMnagment/InsertCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudMnagmentClient) UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/usercrud.UserCrudMnagment/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudMnagmentClient) RemoveCustomer(ctx context.Context, in *CustomerRequestId, opts ...grpc.CallOption) (*StateMessage, error) {
	out := new(StateMessage)
	err := c.cc.Invoke(ctx, "/usercrud.UserCrudMnagment/RemoveCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCrudMnagmentServer is the server API for UserCrudMnagment service.
// All implementations must embed UnimplementedUserCrudMnagmentServer
// for forward compatibility
type UserCrudMnagmentServer interface {
	GetAll(context.Context, *Empty) (*CustomerList, error)
	GetByIdCustomer(context.Context, *CustomerRequestId) (*Customer, error)
	InsertCustomer(context.Context, *ICustomer) (*StateMessage, error)
	UpdateCustomer(context.Context, *Customer) (*Customer, error)
	RemoveCustomer(context.Context, *CustomerRequestId) (*StateMessage, error)
	mustEmbedUnimplementedUserCrudMnagmentServer()
}

// UnimplementedUserCrudMnagmentServer must be embedded to have forward compatible implementations.
type UnimplementedUserCrudMnagmentServer struct {
}

func (UnimplementedUserCrudMnagmentServer) GetAll(context.Context, *Empty) (*CustomerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserCrudMnagmentServer) GetByIdCustomer(context.Context, *CustomerRequestId) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdCustomer not implemented")
}
func (UnimplementedUserCrudMnagmentServer) InsertCustomer(context.Context, *ICustomer) (*StateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCustomer not implemented")
}
func (UnimplementedUserCrudMnagmentServer) UpdateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedUserCrudMnagmentServer) RemoveCustomer(context.Context, *CustomerRequestId) (*StateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomer not implemented")
}
func (UnimplementedUserCrudMnagmentServer) mustEmbedUnimplementedUserCrudMnagmentServer() {}

// UnsafeUserCrudMnagmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCrudMnagmentServer will
// result in compilation errors.
type UnsafeUserCrudMnagmentServer interface {
	mustEmbedUnimplementedUserCrudMnagmentServer()
}

func RegisterUserCrudMnagmentServer(s grpc.ServiceRegistrar, srv UserCrudMnagmentServer) {
	s.RegisterService(&UserCrudMnagment_ServiceDesc, srv)
}

func _UserCrudMnagment_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudMnagmentServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercrud.UserCrudMnagment/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudMnagmentServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrudMnagment_GetByIdCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudMnagmentServer).GetByIdCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercrud.UserCrudMnagment/GetByIdCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudMnagmentServer).GetByIdCustomer(ctx, req.(*CustomerRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrudMnagment_InsertCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICustomer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudMnagmentServer).InsertCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercrud.UserCrudMnagment/InsertCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudMnagmentServer).InsertCustomer(ctx, req.(*ICustomer))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrudMnagment_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudMnagmentServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercrud.UserCrudMnagment/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudMnagmentServer).UpdateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrudMnagment_RemoveCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudMnagmentServer).RemoveCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usercrud.UserCrudMnagment/RemoveCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudMnagmentServer).RemoveCustomer(ctx, req.(*CustomerRequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCrudMnagment_ServiceDesc is the grpc.ServiceDesc for UserCrudMnagment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCrudMnagment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usercrud.UserCrudMnagment",
	HandlerType: (*UserCrudMnagmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _UserCrudMnagment_GetAll_Handler,
		},
		{
			MethodName: "GetByIdCustomer",
			Handler:    _UserCrudMnagment_GetByIdCustomer_Handler,
		},
		{
			MethodName: "InsertCustomer",
			Handler:    _UserCrudMnagment_InsertCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _UserCrudMnagment_UpdateCustomer_Handler,
		},
		{
			MethodName: "RemoveCustomer",
			Handler:    _UserCrudMnagment_RemoveCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/usercrud.proto",
}
